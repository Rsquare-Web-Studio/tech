"use strict";(self.webpackChunktech_blog=self.webpackChunktech_blog||[]).push([[537],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),p=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(i.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(t),g=a,m=c["".concat(i,".").concat(g)]||c[g]||d[g]||o;return t?r.createElement(m,s(s({ref:n},u),{},{components:t})):r.createElement(m,s({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=g;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[c]="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},2886:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:2},s="Deploy blog application using Strapi and Gatsby on Ubuntu VPS",l={unversionedId:"deploy-gatsby-strapi-app-on-ubuntu-vps",id:"deploy-gatsby-strapi-app-on-ubuntu-vps",title:"Deploy blog application using Strapi and Gatsby on Ubuntu VPS",description:"Updating the server",source:"@site/docs/deploy-gatsby-strapi-app-on-ubuntu-vps.md",sourceDirName:".",slug:"/deploy-gatsby-strapi-app-on-ubuntu-vps",permalink:"/tech/deploy-gatsby-strapi-app-on-ubuntu-vps",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Configuring Git and SSH",permalink:"/tech/configuring-git-and-ssh"},next:{title:"Deploy MERN application on Ubuntu VPS",permalink:"/tech/deploy-mern-application-ubuntu-vps"}},i={},p=[{value:"Updating the server",id:"updating-the-server",level:2},{value:"Installing",id:"installing",level:2},{value:"Dependencies",id:"dependencies",level:3},{value:"NVM",id:"nvm",level:3},{value:"Node",id:"node",level:3},{value:"NGINX",id:"nginx",level:3},{value:"Postgres",id:"postgres",level:3},{value:"PM2",id:"pm2",level:3},{value:"Configuring the Firewall",id:"configuring-the-firewall",level:2},{value:"Configuring NGINX",id:"configuring-nginx",level:2},{value:"Generating PAT token",id:"generating-pat-token",level:2},{value:"Cloning the backend and frontend repo",id:"cloning-the-backend-and-frontend-repo",level:2},{value:"Configuring the project",id:"configuring-the-project",level:2}],u={toc:p},c="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"deploy-blog-application-using-strapi-and-gatsby-on-ubuntu-vps"},"Deploy blog application using Strapi and Gatsby on Ubuntu VPS"),(0,a.kt)("h2",{id:"updating-the-server"},"Updating the server"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update -y \nsudo apt upgrade -y \n")),(0,a.kt)("h2",{id:"installing"},"Installing"),(0,a.kt)("h3",{id:"dependencies"},"Dependencies"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install git wget curl build-essential dirmngr gnupg apt-transport-https ca-certificates software-properties-common clang -y \n")),(0,a.kt)("h3",{id:"nvm"},"NVM"),(0,a.kt)("p",null,"Node and NPM"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash \nexport NVM_DIR="$HOME/.nvm"\n[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"  # This loads nvm\n[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\nsource ~/.bashrc\n')),(0,a.kt)("h3",{id:"node"},"Node"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nvm install node\n")),(0,a.kt)("h3",{id:"nginx"},"NGINX"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install nginx -y\nsudo systemctl enable nginx\nsudo systemctl start nginx\nsudo systemctl status nginx\n")),(0,a.kt)("h3",{id:"postgres"},"Postgres"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install postgresql postgresql-contrib\nsudo systemctl start postgresql.service\nsudo systemctl enable postgresql.service\nsudo su - postgres\npsql\nCREATE DATABASE naim;\nCREATE USER constusername WITH PASSWORD 'simple-password';\nGRANT ALL PRIVILEGES ON DATABASE naim to constusername;\n\\c db\nGRANT USAGE, CREATE ON SCHEMA public TO constusername;\n")),(0,a.kt)("h3",{id:"pm2"},"PM2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -g pm2\n")),(0,a.kt)("h2",{id:"configuring-the-firewall"},"Configuring the Firewall"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo ufw enable\nsudo ufw allow 'Nginx Full'\nsudo ufw allow 'OpenSSH'\n")),(0,a.kt)("h2",{id:"configuring-nginx"},"Configuring NGINX"),(0,a.kt)("p",null,"Create nginx conf "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo vim /etc/nginx/sites-available/server.conf\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'server{\n    listen 80;\n    server_name server;\n    location / {\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $host;\n        proxy_pass http://127.0.0.1:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection "upgrade";\n    }\n}\n')),(0,a.kt)("p",null,"Create a system-link to the new configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo rm /etc/nginx/sites-enabled/server.conf\nsudo ln -s /etc/nginx/sites-available/server.conf /etc/nginx/sites-enabled/\nsudo systemctl reload nginx\nsudo systemctl restart nginx\nsudo systemctl status nginx\n")),(0,a.kt)("h2",{id:"generating-pat-token"},"Generating PAT token"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Log in to your GitHub account. The GitHub user must be an organization member or have admin access to a repository where Exalate is installed."),(0,a.kt)("li",{parentName:"ol"},"Navigate to Settings \u2192 Developer settings."),(0,a.kt)("li",{parentName:"ol"},"Select Personal access tokens."),(0,a.kt)("li",{parentName:"ol"},"Press Generate new token to generate a new access token."),(0,a.kt)("li",{parentName:"ol"},"Select the scopes or permissions you'd like to grant this token. To use your token to access repositories from the command line, select repo and workflow."),(0,a.kt)("li",{parentName:"ol"},"Now use the newly created token to clone the required repositories.")),(0,a.kt)("h2",{id:"cloning-the-backend-and-frontend-repo"},"Cloning the backend and frontend repo"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://user:PAT@github.com/user/backend_repo.git server\ngit clone https://user:PAT@github.com/user/backend_repo.git client\n")),(0,a.kt)("h2",{id:"configuring-the-project"},"Configuring the project"),(0,a.kt)("p",null,"Create a new bash script to automate this process"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/client\nnpm i\nrm -rf build\nnpm build\nrm -rf ../server/public\nmv build ../server/public\ncd ../server\npm2 delete all\nnpm i\npm2 start server.js -i max\npm2 save\npm2 startup\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"bash build.sh\n")))}d.isMDXComponent=!0}}]);